int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
    int m = A.size();
    int n = A[0].size();

    // If the starting point or the destination has an obstacle, there is no way to reach the destination.
    if (A[0][0] == 1 || A[m - 1][n - 1] == 1) {
        return 0;
    }

    // Create a 2D DP array to store the number of unique paths to each cell.
    vector<vector<int>> dp(m, vector<int>(n, 0));

    // Set the number of paths for the starting point.
    dp[0][0] = 1;

    // Fill the first row of DP array.
    for (int i = 1; i < m; ++i) {
        if (A[i][0] == 0) {
            dp[i][0] = dp[i - 1][0];
        }
    }

    // Fill the first column of DP array.
    for (int j = 1; j < n; ++j) {
        if (A[0][j] == 0) {
            dp[0][j] = dp[0][j - 1];
        }
    }

    // Fill the DP array based on the presence of obstacles.
    for (int i = 1; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
            if (A[i][j] == 0) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
    }

    return dp[m - 1][n - 1];
}
